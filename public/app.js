'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
  Main Module Definition.
  - We will be using RoC reverse control pattern for better flexisblity
  - The main module is UN-AWARE of any of its dependinces except of 3rd party

  *Rules

  - DO NOT EDIT THIS FILE UNLESS ALL TEAM AGREE THAT ADDING A NEW 3rd PARTY
    DEPENDENCY TO APP IS OKAY BY EVERY ONE
  - All Modules should inherit from this main module
  - All Modules should declare its own Config and Run code blocks,
    Angular will take care of running them all.
  - Keep this module Clean, only Global Configurtion should be set here
*/
(function (angular) {
  'use strict';

  angular.module('webtrekk', ['ui.router'
  // uncomment following if you gona use AMD tool
  // require('./services').name,
  // require('./details').name,
  // require('./main').name,
  // require('./navi').name,
  ]).config(["$urlServiceProvider", "$locationProvider", function ($urlServiceProvider, $locationProvider) {
    "ngInject";

    $locationProvider.html5Mode(true);
  }]); // use it to inject global 3rd parties
})(angular);

(function (angular) {
  'use strict';

  detailsController.$inject = ["UsersData", "$stateParams", "$state", "CustomerClass"];
  angular.module('webtrekk').controller('detailsController', detailsController);

  function detailsController(UsersData, $stateParams, $state, CustomerClass) {
    "ngInject";

    var _this = this;

    activate.call(this);

    ////////////////
    function activate() {
      UsersData.load();
      this.user = UsersData.byId[$stateParams.customerId] || new CustomerClass();
    }

    this.save = function () {
      if (!_this.user.isValid()) return alert('please complete information');
      if (_this.user.customer_id == '0') {
        UsersData.create(_this.user);
      } else {
        UsersData.save();
      }
      $state.go('customerlist');
    };
  }
})(angular);
(function (angular) {
  'use strict';

  config.$inject = ["$stateProvider", "$urlServiceProvider"];
  angular.module('webtrekk').config(config).directive('details', detailsDirectionConfig);

  function config($stateProvider, $urlServiceProvider) {
    "ngInject";

    $stateProvider.state('customerDetails', {
      url: '/data/{customerId:[0-9]{1,8}}',
      template: "<details></details>"
    });
  }

  function detailsDirectionConfig() {
    return {
      templateUrl: '/details/details.html',
      scope: {},
      replace: true,
      controllerAs: "$ctrl",
      controller: 'detailsController'
    };
  }
})(angular);

angular.module('webtrekk').filter('ageFilter', function () {
  function calculateAge(birthday) {
    // birthday is a date
    if (!birthday) return 'N/A';
    if (!birthday.getTime) {
      birthday = new Date(birthday);
    }
    var ageDifMs = Date.now() - birthday.getTime();
    var ageDate = new Date(ageDifMs); // miliseconds from epoch
    return Math.abs(ageDate.getUTCFullYear() - 1970);
  }

  return function (birthdate) {
    return calculateAge(birthdate);
  };
});
angular.module('webtrekk').filter('genderFilter', function () {
  function genderFilter(gender) {
    // birthday is a date
    if (!gender) return 'N/A';
    var normalized = String(gender).toLowerCase();
    switch (['m', 'w', 'f'].indexOf(normalized)) {
      case 0:
        return 'Male';
      case 1:
      case 2:
        return 'Female';
      default:
        return 'N/A';
    }
  }

  return function (gender) {
    return genderFilter(gender);
  };
});
(function (angular) {
  'use strict';

  config.$inject = ["$stateProvider", "$urlServiceProvider"];
  angular.module('webtrekk').config(config).directive('main', function () {
    return {
      templateUrl: '/main/main.html',
      scope: {},
      replace: true,
      controllerAs: "$ctrl",
      controller: 'mainController'
    };
  });

  function config($stateProvider, $urlServiceProvider) {
    "ngInject";
    // setting self as main route

    $urlServiceProvider.rules.otherwise({ state: 'customerlist' });

    $stateProvider.state('customerlist', {
      url: '/',
      template: "<main></main>"
    });
  }
})(angular);

(function (angular) {
  'use strict';

  mainController.$inject = ["UsersData", "$timeout", "$scope"];
  angular.module('webtrekk').controller('mainController', mainController);

  function mainController(UsersData, $timeout, $scope) {
    "ngInject";

    // get sorted array of customer_id

    this.orderBy = 'last_name';
    this.reverseSort = false;

    this.read = read;
    this.remove = remove.bind(this);
    this.sort = sort.bind(this);

    activate.call(this);

    /////////////////////////////
    function activate() {
      var _this2 = this;

      // Load Customers Data from Storage
      // Set initial Sorting by last_name
      var unWatch = $scope.$watch(function () {
        return UsersData.ids;
      }, function (value) {
        _this2.users = value;
      });
      UsersData.load();
      UsersData.sortBy('last_name');
      // $scope.$$destroy(function(){
      //   unWatch();
      // })
    }

    // return attr of user by his id;
    function read(id, attr) {
      return UsersData.byId[id][attr] || 'N/A';
    }

    // Delete a Customer and all his navi data;
    function remove(id) {
      UsersData.remove(id);
      this.users = UsersData.ids;
    }

    // Sort ids array by attr;
    function sort(attr) {
      if (this.orderBy !== attr) {
        this.orderBy = attr;
        // assure that first click is assending as per requirements
        this.reverseSort = false;
      } else {
        this.reverseSort = !this.reverseSort;
      }
      var sign = this.reverseSort ? '-' : '';
      this.users = UsersData.sortBy(sign + this.orderBy);
    }
  }
})(angular);

(function (angular) {
  'use strict';

  config.$inject = ["$stateProvider", "$urlServiceProvider"];
  angular.module('webtrekk').config(config).directive('navi', detailsDirectionConfig);

  function config($stateProvider, $urlServiceProvider) {
    "ngInject";

    $stateProvider.state('navi', {
      url: '/navi/{customerId:[0-9]{1,8}}',
      template: "<navi></navi>"
    });
  }

  function detailsDirectionConfig() {
    return {
      templateUrl: '/navi/navi.html',
      scope: {
        customer: '<',
        preview: '<'
      },
      replace: true,
      controllerAs: "$ctrl",
      controller: 'navHistoryController'
    };
  }
})(angular);

(function () {
  'use strict';

  navigationController.$inject = ["UsersData", "$scope", "$stateParams"];
  angular.module('webtrekk').controller('navHistoryController', navigationController);

  function navigationController(UsersData, $scope, $stateParams) {
    "ngInject";

    this.preview = !!$scope.preview;
    UsersData.load();
    this.id = $stateParams.customerId || $scope.customer;
    this.user = UsersData.byId[this.id] || {};
    this.history = UsersData.naviById[this.id];
  }
})(angular);

(function (angular) {
  'use strict';

  /**
  * @namespace Storage
  * @desc interface for offline data fetching and persistence
  */

  $wt_storage.$inject = ["initialState", "StorageEngine", "STORAGE_ID"];
  angular.module('webtrekk').constant('StorageEngine', localStorage).constant('STORAGE_ID', 'webtrekk__local').constant('initialState', {
    master: [{ "customer_id": "1", "first_name": "Peter", "last_name": "Smith", "birthday": "1996-10-12", "gender": "m", "last_contact": "2013-06-01", "customer_lifetime_value": "191,12" }, { "customer_id": "2", "first_name": "Anna", "last_name": "Hopp", "birthday": "1987-05-03", "gender": "w", "last_contact": "2013-07-08", "customer_lifetime_value": "50,99" }, { "customer_id": "3", "first_name": "Christian", "last_name": "Cox", "birthday": "1991-02-21", "gender": "m", "last_contact": "2013-08-01", "customer_lifetime_value": "0" }, { "customer_id": "4", "first_name": "Roxy", "last_name": "Fox", "birthday": "1979-06-30", "gender": "w", "last_contact": "2012-01-29", "customer_lifetime_value": "213,12" }, { "customer_id": "5", "first_name": "Eric", "last_name": "Adam", "birthday": "1969-11-21", "gender": "m", "last_contact": "2013-03-18", "customer_lifetime_value": "1019,91" }],
    navi: [{ "customer_id": "1", "pages": "A", "timestamp": "2013-06-01 10:10:12" }, { "customer_id": "1", "pages": "B", "timestamp": "2013-06-01 10:11:12" }, { "customer_id": "1", "pages": "A", "timestamp": "2013-06-01 10:12:12" }, { "customer_id": "2", "pages": "C", "timestamp": "2013-07-08 09:03:09" }, { "customer_id": "2", "pages": "A", "timestamp": "2013-07-08 09:09:09" }, { "customer_id": "2", "pages": "D", "timestamp": "2013-07-08 09:19:09" }, { "customer_id": "3", "pages": "B", "timestamp": "2013-07-08 09:19:09" }, { "customer_id": "3", "pages": "A", "timestamp": "2013-07-08 09:19:10" }, { "customer_id": "4", "pages": "D", "timestamp": "2013-07-08 09:19:11" }, { "customer_id": "4", "pages": "A", "timestamp": "2013-07-08 09:19:12" }, { "customer_id": "5", "pages": "X", "timestamp": "2013-07-08 09:19:13" }, { "customer_id": "5", "pages": "A", "timestamp": "2013-07-08 09:19:14" }, { "customer_id": "5", "pages": "B", "timestamp": "2013-07-08 09:19:15" }]
  }).factory('$wt_storage', $wt_storage);

  /**
  * @name $wb_storage
  * @desc main storage service to be consumed by other services
  * @param {Object} initialState returned if localsorage is null
  * @param {Object} StorageEngine must implement localStorage interface
  * @param {String} STORAGE_ID name space for saving
  * @returns {Object} angular.service
  * @memberOf Storage
  * @todo should return a promise
  * @todo take Storage_id and return a closure !
  */
  function $wt_storage(initialState, StorageEngine, STORAGE_ID) {
    "ngInject";

    var service = {
      get: get,
      set: set,
      reload: reload
    };
    return service;

    ////////////////
    // this.get = ;
    // this.set = set;
    // this.reload = reload.bind(this);

    ////////////////
    function get() {
      try {
        var json = JSON.parse(StorageEngine.getItem(STORAGE_ID));
        if (!json || (typeof json === 'undefined' ? 'undefined' : _typeof(json)) !== (typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState))) {
          throw 'no intialdata';
        }
        return json;
      } catch (e) {
        this.set.call(this, initialState);
        this._error = e;
        return initialState;
      }
    }
    function set(data) {
      StorageEngine.setItem(STORAGE_ID, JSON.stringify(data));
    }
    function reload() {
      this.set(initialState);
      return this.get();
    }
  }
})(angular);

(function () {
  'use strict';

  angular.module('webtrekk').factory('CustomerClass', function () {
    return Customer;
  });

  var Customer = function () {
    function Customer() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Customer);

      this.customer_id = this._id = String(props.customer_id || '0');
      this.first_name = String(props.first_name || '');
      this.last_name = String(props.last_name || '');
      this.birthday = new Date(props.birthday);
      this.gender = String(props.gender).toLowerCase();
      this.last_contact = new Date(props.last_contact);
      this.customer_lifetime_value = String(props.customer_lifetime_value || '');

      this.isValid = this.isValid.bind(this);
    }

    _createClass(Customer, [{
      key: 'isValid',
      value: function isValid() {
        return [['m', 'w'].indexOf(this.gender) === -1, isNaN(Date.parse(this.birthday)), isNaN(Date.parse(this.last_contact))].filter(Boolean).length === 0;
      }
    }]);

    return Customer;
  }();
})();
(function (angular) {
  'use strict';

  CustomerData.$inject = ["$wt_storage", "CustomerClass"];
  angular.module('webtrekk').factory('CustomerClass', function () {
    return Customer;
  }).service('UsersData', CustomerData);

  /**
  * Data Provider Service
  * @namespace UsersData
  */
  function CustomerData($wt_storage, CustomerClass) {
    "ngInject";

    var _this3 = this;

    this.load = load.bind(this);
    this.byId = {};
    this.naviById = {};
    this.ids = [];
    this.sortBy = sortBy.bind(this);
    this.save = save.bind(this);
    this.remove = remove.bind(this);
    this.create = create.bind(this);
    this.reload = function () {
      _this3._loaded = false;
      return _this3.load();
    };

    ////////////////
    // for unit testing not part of UserData api
    this._dynamicSort = _dynamicSort;

    /**
    * @name Load
    * @desc load data from localstorage and set this variables
    * @returns {UsersData} to facilitate chaining
    * @memberOf UsersData
    */
    function load() {
      if (this._loaded) return this;
      var data = $wt_storage.get();
      this.byId = data.master.reduce(_masterReducer, {});
      this.naviById = data.navi.reduce(_naviReducer, {});
      this.ids = Object.keys(this.byId);
      this._loaded = true;
      return this;
    }

    /**
    * @name Create
    * @desc Create a new Customer and save to Storage
    * @returns {UsersData} to facilitate chaining
    * @memberOf UsersData
    */
    function create(data) {
      var customer = new CustomerClass(data); // deep clone
      customer.customer_id = customer._findNextId(this.ids);

      this.byId[customer.customer_id] = customer;
      this.naviById[customer.customer_id] = [];
      this.ids.push(customer.customer_id);

      return this.save();
    }

    /**
    * @name Save
    * @desc Save current State to Storage
    * @returns {UsersData} to facilitate chaining
    * @memberOf UsersData
    */
    function save() {
      var data = {
        master: Object.values(this.byId),
        navi: Object.values(this.naviById).reduce(function (a, i) {
          return a.concat(i);
        }, [])
      };
      $wt_storage.set(data);

      return this;
    }

    /**
    * @name Remove
    * @desc Remove Customer by his id
    * @returns {UsersData} to facilitate chaining
    * @memberOf UsersData
    */
    function remove(id) {
      var data = {
        master: Object.values(this.byId).filter(function (i) {
          return i.customer_id !== id;
        }),
        navi: Object.values(this.naviById).reduce(function (a, i) {
          return a.concat(i);
        }, []).filter(function (i) {
          return i.customer_id !== id;
        })
      };
      $wt_storage.set(data);

      // reload
      load.call(this);
    }

    /**
    * @name sortBy
    * @desc sort this.ids using a attr
    * @param {String} attr
    * @returns {Array} this.ids
    * @memberOf UsersData
    */
    function sortBy(attr) {
      this.ids = this.ids.sort(_dynamicSort(attr, this.byId));
      return this.ids;
    }

    /**
     * @name _masterReducer
     * @desc Helper function used to build this.byId
     * @param {Object} carry
     * @param {User} item
     * @memberOf UsersData.load
     */
    var _masterReducer = function _masterReducer(carry, item) {
      carry[item.customer_id] = new CustomerClass(item);
      return carry;
    };
    /**
     * @name _naviReducer
     * @desc Helper function used to build this.naviById
     * @param {Object} carry
     * @param {Navi} item
     * @memberOf UsersData.load
     */
    var _naviReducer = function _naviReducer(carry, item) {
      item.timestamp = new Date(item.timestamp);

      if (carry[item.customer_id]) {
        carry[item.customer_id].push(item);
      } else {
        carry[item.customer_id] = [item];
      }
      return carry;
    };

    /**
     * generate sort function
     * https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value-in-javascript
     * @param {String} property
     * @param {Object} $ref to be used if we are sorting array of ids
     * @todo move into utilities class..
     */
    function _dynamicSort(property, $ref) {
      var sortOrder = 1;
      if (property[0] === "-") {
        sortOrder = -1;
        property = property.substr(1);
      }
      return function (a, b) {
        if ($ref) {
          var a_ = $ref[a];
          var b_ = $ref[b];
          return (a_[property] < b_[property] ? -1 : a_[property] > b_[property] ? 1 : 0) * sortOrder;
        } else {
          return (a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0) * sortOrder;
        }
      };
    }
  }

  /**
  * @namespace Customer
  * @desc Customer class can be an angular constant, value, or factory
  */

  var Customer = function () {
    function Customer() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Customer);

      this.customer_id = this._id = String(props.customer_id || '0');
      this.first_name = String(props.first_name || '');
      this.last_name = String(props.last_name || '');
      this.birthday = new Date(props.birthday);
      this.gender = String(props.gender).toLowerCase();
      this.last_contact = new Date(props.last_contact);
      this.customer_lifetime_value = String(props.customer_lifetime_value || '');

      this.isValid = this.isValid.bind(this);
    }

    /**
    * @name isValid
    * @desc validate Customer model
    * @returns {Boolean}
    * @memberOf Customer
    */


    _createClass(Customer, [{
      key: 'isValid',
      value: function isValid() {
        return [['m', 'w'].indexOf(this.gender) === -1, isNaN(Date.parse(this.birthday)), isNaN(Date.parse(this.last_contact))].filter(Boolean).length === 0;
      }

      /**
      * @name _findNextId private function
      * @desc search array of ids and return the next id (last_id+1)
      * @param {Array} findNextId
      * @returns {Number|NaN} NaN if provided a invalid array for ids;
      * @memberOf UsersData.create
      * @memberOf Customer
      * @todo i keep it here so that i can access it later in Tests should be moved out to Utils helper service
      */

    }, {
      key: '_findNextId',
      value: function _findNextId(ids) {

        var trials = 0;
        var search = Array.from(ids).map(Number).sort();
        var i = search[0] + 1;

        while (search.indexOf(i) !== -1 && trials < 100) {
          i = i + 1;
          trials++;
        }

        return String(i);
      }
    }]);

    return Customer;
  }();
})(angular);

(function (angular) {
  'use strict';

  angular.module("webtrekk").run(["$templateCache", function ($templateCache) {
    $templateCache.put("/navi/navi.html", "<div class=\"\">\n <h1 ng-if=\"!$ctrl.user.customer_id\">no valid user id provided</h1>\n <table ng-if=\"$ctrl.user.customer_id\" ng-init=\"$reverseSort=false;$attr=\'pages\'\" id=\"main_overview_table\" class=\"table table-sm table-hover table-striped table-bordered\" style=\"margin:20px auto\">\n <caption ng-hide=\"{{preview}}\" style=\"caption-side:top;\">\n <h1>{{$ctrl.user.first_name}} {{$ctrl.user.last_name}} Navigation history</h1>\n <a ui-sref=\"customerlist()\" class=\"btn btn-primary\">\n back\n <span class=\"badge badge-secondary\">{{$ctrl.count}}+</span>\n </a>\n </caption>\n <thead class=\"thead-inverse\">\n <tr>\n <th>\n <a style=\"color:white\" href=\"#\" ng-click=\"$attr=\'pages\';$reverseSort=!$reverseSort\">\n Pages\n <span ng-show=\"$attr == \'pages\'\">\n <span ng-show=\"!$reverseSort\">^</span>\n <span ng-show=\"$reverseSort\">v</span>\n </span>\n </a>\n </th>\n <th>\n <a style=\"color:white\" href=\"#\" ng-click=\"$attr=\'timestamp\';$reverseSort=!$reverseSort\">\n Time stamp\n <span ng-show=\"$attr == \'timestamp\'\">\n <span ng-show=\"!$reverseSort\">^</span>\n <span ng-show=\"$reverseSort\">v</span>\n </span>\n </a>\n </th>\n </tr>\n </thead>\n <tbody>\n <tr ng-repeat=\"entry in $ctrl.history|orderBy:$attr:$reverseSort\">\n <th>{{entry.pages}}</th>\n <th>{{entry.timestamp}}</th>\n </tr>\n </tbody>\n </table>\n\n</div>");
    $templateCache.put("/main/main.html", "<table id=\"main_overview_table\" class=\"table table-sm table-hover table-striped table-bordered\" style=\"margin:20px auto\">\n <caption style=\"caption-side:top;\">\n <h1>Customer Overview</h1>\n <a ui-sref=\"customerDetails({customerId: 0})\" class=\"btn btn-primary\">\n Create new customer\n <span class=\"badge badge-secondary\">{{$ctrl.count}}+</span>\n </button>\n </caption>\n <thead class=\"thead-inverse\">\n <tr>\n <th>\n <a style=\"color:white\" href=\"#\" ng-click=\"$ctrl.sort(\'first_name\')\" >\n First Name\n <span ng-show=\"$ctrl.orderBy == \'first_name\'\">\n <span ng-show=\"!$ctrl.reverseSort\">^</span>\n <span ng-show=\"$ctrl.reverseSort\">v</span>\n </span>\n </a>\n </th>\n <th>\n <a style=\"color:white\" href=\"#\" ng-click=\"$ctrl.sort(\'last_name\')\">\n Last Name\n <span ng-show=\"$ctrl.orderBy == \'last_name\'\">\n <span ng-show=\"!$ctrl.reverseSort\">^</span>\n <span ng-show=\"$ctrl.reverseSort\">v</span>\n </span>\n </a>\n </th>\n <th>\n <a style=\"color:white\" href=\"#\" ng-click=\"$ctrl.sort(\'birthday\')\" >\n Age\n <span ng-show=\"$ctrl.orderBy == \'birthday\'\">\n <span ng-show=\"!$ctrl.reverseSort\">^</span>\n <span ng-show=\"$ctrl.reverseSort\">v</span>\n </span>\n </a>\n </th>\n <th>\n <a style=\"color:white\" href=\"#\" ng-click=\"$ctrl.sort(\'gender\')\" >\n Gender\n <span ng-show=\"$ctrl.orderBy == \'gender\'\">\n <span ng-show=\"!$ctrl.reverseSort\">^</span>\n <span ng-show=\"$ctrl.reverseSort\">v</span>\n </span>\n </a>\n </th>\n <th>options</th>\n </tr>\n </thead>\n <tr ng-repeat=\"id in $ctrl.users\" ng-class=\"{{$ctrl.UsersData.byId[id].isValid() ? \'ok\' : \'table-danger\'}}\">\n <td> {{::$ctrl.read(id,\'first_name\')}} </td>\n <td> {{::$ctrl.read(id,\'last_name\')}} </td>\n <td> {{::$ctrl.read(id,\'birthday\')|ageFilter}} </td>\n <td> {{::$ctrl.read(id,\'gender\')|genderFilter}} </td>\n <td>\n <div class=\"flex__row\">\n <a ui-sref=\"customerDetails({customerId: id})\" class=\"btn btn-primary\">\n Edit\n </a>\n <button class=\"btn btn-danger\" ng-click=\"$ctrl.remove(id)\">\n Delete\n </button>\n <a ui-sref=\"navi({customerId: id})\" class=\"btn btn-success\">\n Navi\n </a>\n </div>\n </td>\n </tr>\n</table>");
    $templateCache.put("/details/details.html", "<div class=\"has__form\">\n <form>\n <div class=\"form-group\">\n <h1 ng-if=\"$ctrl.user._id != \'0\'\">{{$ctrl.user.first_name}} {{$ctrl.user.last_name}} Details</h1>\n <h1 ng-if=\"$ctrl.user._id == \'0\'\">Create New user</h1>\n </div>\n\n <div class=\"form-group\" ng-if=\"$ctrl.user._id != \'0\'\">\n <label for=\"customer_id\">customer id</label>\n <input type=\"number\" class=\"form-control\" id=\"customer_id\" disabled ng-value=\"{{$ctrl.user.customer_id/1}}\" placeholder=\"customer_id\">\n <small ng-if=\"$ctrl.errors.customer_id\" id=\"customer_idHelp\" class=\"form-text text-danger\">{{$ctrl.errors.customer_id}}</small>\n </div>\n\n <div class=\"form-group\">\n <label for=\"first_name\">first name*</label>\n <input type=\"string\" class=\"form-control\" id=\"first_name\" ng-model=\"$ctrl.user.first_name\" placeholder=\"first_name\">\n <small ng-if=\"$ctrl.errors.first_name\" id=\"first_nameHelp\" class=\"form-text text-danger\">{{$ctrl.errors.first_name}}</small>\n </div>\n \n <div class=\"form-group\">\n <label for=\"last_name\">last name*</label>\n <input type=\"string\" class=\"form-control\" id=\"last_name\" ng-model=\"$ctrl.user.last_name\" placeholder=\"last_name\">\n <small ng-if=\"$ctrl.errors.last_name\" id=\"last_nameHelp\" class=\"form-text text-danger\">{{$ctrl.errors.last_name}}</small>\n </div>\n\n <div class=\"form-group\">\n <label for=\"birthday\">birthday*</label>\n <input\n placeholder=\"yyyy-MM-dd\"\n min=\"1970-01-01\" max=\"2017-12-22\" required type=\"date\" class=\"form-control\" id=\"birthday\" ng-model=\"$ctrl.user.birthday\" placeholder=\"birthday\">\n <small ng-if=\"$ctrl.errors.birthday\" id=\"birthdayHelp\" class=\"form-text text-danger\">{{$ctrl.errors.birthday}}</small>\n </div>\n \n <div class=\"form-group\">\n <label for=\"gender\">gender*</label>\n <select name=\"gender\" class=\"form-control\" ng-model=\"$ctrl.user.gender\">\n <option value=\"m\">Male</option>\n <option value=\"w\">Female</option>\n </select>\n </div>\n \n <div class=\"form-group\">\n <label for=\"last_contact\">last contact*</label>\n <input ng-disabled=\"!$ctrl.user.customer_id\" type=\"date\" class=\"form-control\" id=\"last_contact\" ng-model=\"$ctrl.user.last_contact\" placeholder=\"last_contact\">\n <small ng-if=\"$ctrl.errors.last_contact\" id=\"last_contactHelp\" class=\"form-text text-danger\">{{$ctrl.errors.last_contact}}</small>\n </div>\n \n <div class=\"form-group\">\n <label for=\"customer_lifetime_value\">customer lifetime_value</label>\n <input type=\"string\" class=\"form-control\" id=\"customer_lifetime_value\" ng-model=\"$ctrl.user.customer_lifetime_value\" placeholder=\"customer_lifetime_value\">\n <small ng-if=\"$ctrl.errors.customer_lifetime_value\" id=\"customer_lifetime_valueHelp\" class=\"form-text text-danger\">{{$ctrl.errors.customer_lifetime_value}}</small>\n </div>\n <div style=\"min-width:100%\">\n <button ng-disabled=\"!$ctrl.user.isValid()\" class=\"btn btn-primary\" ng-click=\"$ctrl.save()\">\n save and go back\n </button>\n <button ui-sref=\"customerlist()\" class=\"btn btn-dark\">\n cancel\n </button>\n </div>\n </form>\n <h5>Preview of your history \"Reusable Component Example\"</h5>\n <navi customer=\"$ctrl.id\" preview=\"1\"></navi>\n</div>");
  }]);
})(angular);